QUESTION:- NumberOfIslands
class Solution {
    private int row;
    private int column;
    private int count = 0;
    public int numIslands(char[][] grid) {
        row = grid.length;
        column = grid[0].length;
        for(int i = 0;i<row;i++){
            for(int j = 0;j<column;j++){
                if(grid[i][j] == '1'){
                    dfs(grid,i,j);
                    count++;
                    
                }
            }
        }
        return count;

    }
    public void dfs(char[][] grid,int i,int j){
        if(i<0 || i>=row || j<0 || j>=column ||grid[i][j]=='0'){
            return;
        }
        grid[i][j]='0';
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}

QUESTION:-FLOOD FILL

class Solution {
    int row;
    int start;
    int col;
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        row = image.length;
        col = image[0].length;
        start = image[sr][sc];
        if(start!=newColor){
            dfs(image,sr,sc,newColor);
        }
    return image;
    }
    public void dfs(int[][] image,int i,int j,int newColor){
        if(i<0 || i>=row || j<0 || j>=col || image[i][j]!=start){
            return;
        }
        image[i][j] = newColor;
        dfs(image,i+1,j,newColor);
        dfs(image,i-1,j,newColor);
        dfs(image,i,j+1,newColor);
        dfs(image,i,j-1,newColor);
    }
}
